#!/bin/bash

stepper(){
    PURPLE='\033[0;35m'
    CYAN='\033[0;36m'
    NO_COLOR='\033[0m'
    printf "${CYAN}  [${PURPLE}${INDEX}/${TOTAL}${CYAN}]  $1${NO_COLOR}\n"
    INDEX=$(($INDEX+1))
}

print_err(){
    RED='\033[0;31m'
    NO_COLOR='\033[0m'
    printf "${RED} Error: ${NO_COLOR}$1\n"
}

counter(){
    printf "$#"
}

dirs_init(){
    stepper "Creating directory $PROJECT_NAME"
    mkdir $PROJECT_NAME || print_err "Failed at creating dir" && return -1
}

git_init(){
    stepper "Initializing git repository"
    git init "$PROJECT_NAME" > /dev/null
    echo $GITIGNORE > "$PROJECT_NAME/.gitignore"
}

license_init(){
    stepper "Download file: LICENSE (GPLv3)"
    wget http://www.gnu.org/licenses/gpl-3.0.txt -O "$PROJECT_NAME/LICENSE" 2> /dev/null

}

main_init(){
    stepper "Creating main.c file"
    echo $MAIN_C > "$PROJECT_NAME/main.c"
}

makefile_init(){
    stepper "Creating MAKEFILE"
    echo $MAKEFILE > "$PROJECT_NAME/makefile"
}

readme_init(){
    stepper "Creating README.md"
    touch "$PROJECT_NAME/README.md"
}
clang_init(){
    stepper "Initializing clang settings"
    echo $CLANG > "$PROJECT_NAME/.clang-format"

}

TASKS="
dirs_init
git_init
readme_init
license_init
main_init
makefile_init
clang_init
"

TOTAL=7
INDEX=1

[[ $# -lt 1 ]] && print_err "Project name required" && return -1

PROJECT_NAME=$1


GITIGNORE='
# Files
*.o

# Editor Files
*.swp
'


MAIN_C='
#include <stdlib.h>
#include <stdio.h>

int main(int argc, char **argv) 
{
  printf("Hello world!\\n");

  return 0;
}
'

MAKEFILE='
CC=gcc
CFLAGS=-I.
# DEPS=%.h
OBJ = *.o

%.o: %.c $(DEPS)
	$(CC) -c -o $@ $< $(CFLAGS)

main: $(OBJ)
	$(CC) -o $@ $^ $(CFLAGS)
'

CLANG='
# SPDX-License-Identifier: GPL-2.0
#
# clang-format configuration file. Intended for clang-format >= 4.
#
# For more information, see:
#
#   Documentation/process/clang-format.rst
#   https://clang.llvm.org/docs/ClangFormat.html
#   https://clang.llvm.org/docs/ClangFormatStyleOptions.html
#
---
AccessModifierOffset: -4
AlignAfterOpenBracket: Align
AlignConsecutiveAssignments: false
AlignConsecutiveDeclarations: false
#AlignEscapedNewlines: Left # Unknown to clang-format-4.0
AlignOperands: true
AlignTrailingComments: false
AllowAllParametersOfDeclarationOnNextLine: false
AllowShortBlocksOnASingleLine: false
AllowShortCaseLabelsOnASingleLine: false
AllowShortFunctionsOnASingleLine: None
AllowShortIfStatementsOnASingleLine: false
AllowShortLoopsOnASingleLine: false
AlwaysBreakAfterDefinitionReturnType: None
AlwaysBreakAfterReturnType: None
AlwaysBreakBeforeMultilineStrings: false
AlwaysBreakTemplateDeclarations: false
BinPackArguments: true
BinPackParameters: true
BraceWrapping:
  AfterClass: false
  AfterControlStatement: false
  AfterEnum: false
  AfterFunction: true
  AfterNamespace: true
  AfterObjCDeclaration: false
  AfterStruct: false
  AfterUnion: false
  #AfterExternBlock: false # Unknown to clang-format-5.0
  BeforeCatch: false
  BeforeElse: false
  IndentBraces: false
  #SplitEmptyFunction: true # Unknown to clang-format-4.0
  #SplitEmptyRecord: true # Unknown to clang-format-4.0
  #SplitEmptyNamespace: true # Unknown to clang-format-4.0
BreakBeforeBinaryOperators: None
BreakBeforeBraces: Custom
#BreakBeforeInheritanceComma: false # Unknown to clang-format-4.0
BreakBeforeTernaryOperators: false
BreakConstructorInitializersBeforeComma: false
#BreakConstructorInitializers: BeforeComma # Unknown to clang-format-4.0
BreakStringLiterals: false
ColumnLimit: 80
#CompactNamespaces: false # Unknown to clang-format-4.0
ConstructorInitializerAllOnOneLineOrOnePerLine: false
ConstructorInitializerIndentWidth: 8
ContinuationIndentWidth: 8
Cpp11BracedListStyle: false
DerivePointerAlignment: false
DisableFormat: false
ExperimentalAutoDetectBinPacking: false
#FixNamespaceComments: false # Unknown to clang-format-4.0
'

for task in $TASKS
do
    eval $task 
done

